Lesson 4: Advanced Pattern Matching and Functional Composition

Today we'll cover

* Functions (again)
** compose
** andThen
** orElse
* PartialFunctions
** range and domain
** composition
* Pattern Matching
** extractor methods
* What is a case statement?

<pre>
scala> def addUmm(x: String) = x + " umm "
timesTwo: (x: String)String

scala> def addAhem(x: String) = x + " ahem"
timesThree: (x: String)String

scala> val timesSix = (timesTwo _) andThen (timesThree _)
timesSix: (Int) => Int = <function1>

scala> timesSix(2)
res0: Int = 12
</pre>

compose is f(g(x))
andThen is g(f(x))

FIXME: HARD TO TELL FROM THESE EXAMPLES SINCE THEY ARE COMMUTATIVE STEVE

<pre>

</pre>

h3. Pattern Matching

h4. Refreshing our memory

You can pattern match on values.

<pre>
scala> def printNumber(i: Int) = i match {
     |   case 1 => println("it's a one!")
     |   case 2 => println("it's a two!")
     |   case _ => println("it's something else!")
     | }
printNumber: (i: Int)Unit

scala> printNumber(1)
it's a one!

scala> printNumber(2)
it's a two!

scala> printNumber(3)
it's something else!

</pre>

underscore is the wildcard pattern, it matches anything.

You can also capture variables
<pre>
scala> def printNumber(i: Int) = i match {
     |   case 1 => println("it's a one!")
     |   case 2 => println("it's a two!")
     |   case m => println("it's the number: " + m + "!")
     | }
printNumber: (i: Int)Unit

scala> printNumber(3)
it's the number: 3!

</pre>


h4. Extractor methods

You can't easily pattern match on regular classes like you can on case classes.

<pre>
scala> class User(username: String, password: String, userid: Int)
defined class User

scala> val stevej = new User("stevej", "1234", 150)
stevej: User = User@4df3e7e8

scala> stevej match {
     |   case User("stevej", _, _) => println("it's stevej")
     | }
<console>:15: error: not found: value User
         case User("stevej", _, _) => println("it's stevej")
</pre>

But what if we don't want User to be a case class? What if we don't even
have access to the source of User? How can we make User interact nicely
with pattern matching?

Use the extractor method: unapply.

Make a companion object with an unapply method. The unapply should
return an Option with a Tuple that matches your class' constructor.

<pre>
object User {
  def unapply(user: User): Option[(String, String, Int)] =
    Some((user.username, user.password, user.userid))
}
</pre>

Now it will fit in nicely.

<pre>
scala> val stevej = new User("stevej", "1234", 150)
stevej: User = User@5260bd13

scala> stevej match {
     |   case User("stevej", _, _) => println("it's stevej")
     | }
it's stevej
</pre>


h3. PartialFunctions

A function closes over an entire domain. In other words, a function
defined as (Int) => String takes any Int and returns a String.

A Partial Function is only partially closed over a domain. A Partial
Function (Int) => String might not accept every Int.

isDefinedAt is a method on PartialFunction that can be used to
determine if the PartialFunction closes over a given argument.

A partial pattern match is an excellent example of a partial function.

<pre>
scala> val one: PartialFunction[Int, String] = { case 1 => "one" }
one: PartialFunction[Int,String] = <function1>

scala> one.isDefinedAt(2)
res0: Boolean = false

scala> one.isDefinedAt(1)
res1: Boolean = true
</pre>

PartialFunctions can be composed with <tt>compose</tt> or
<tt>andThen</tt> just like full functions.

<pre>
scala> val two: PartialFunction[Int, String] = { case 2 => "two" }
two: PartialFunction[Int,String] = <function1>

scala> val three: PartialFunction[Int, String] = { case 3 => "three" }
three: PartialFunction[Int,String] = <function1>

scala> val wildcard: PartialFunction[Int, String] = { case _ => "something else" }
wildcard: PartialFunction[Int,String] = <function1>

scala> one orElse two orElse three orElse wildcard
res23: PartialFunction[Int,String] = <function1>

scala> res23(5)
res24: String = something else

scala> res23(3)
res25: String = three

scala> res23(2)
res26: String = two

scala> res23(1)
res27: String = one

scala> res23(0)
res28: String = something else
</pre>


h4. The mystery of case.

Last week we saw something curious. We saw a case statement used where
a function is normally used.

<pre>
scala> case class PhoneExt(name: String, ext: Int)
defined class PhoneExt

scala> val extensions = List(PhoneExt("steve", 100), PhoneExt("robey", 200))
extensions: List[PhoneExt] = List(PhoneExt(steve,100), PhoneExt(robey,200))

scala> extensions.filter { case PhoneExt(name, extension) => extension < 200 }
res0: List[PhoneExt] = List(PhoneExt(steve,100))
</pre>

Why does this work?

filter takes a function. In this case a predicate function of (PhoneExt) => Boolean.

A PartialFunction is a subtype of Function so filter can also take a
PartialFunction!
